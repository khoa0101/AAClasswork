Problem 1
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
Follow up: Could you write an algorithm with O(log n) runtime complexity?
 
Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:
Input: nums = [], target = 0
Output: [-1,-1]
 
Constraints:
0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109

function indexFind(arr, target){ // arr = [5,7,7,8,8,10], target = 8
  let start = -1; // 3
  let startFound = false; //true
  let end = -1; //4

  for(let i = 0; i < arr.length - 1 ; i++){ 
    if(!startFound && arr[i] === target){
      startFound = true;
      start = i;
    } else if (arr[i] === target && arr[i + 1] !== target){
      end = i;
    }
  }
  return [start, end]; //[3,4]
}


Problem 2:
Given an m x n matrix, return all elements of the matrix in spiral order.
 
Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:
Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 
Constraints:
m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100

[0][0]    [0][0]
[0][1]    [0][1]
          [0][2]
[0][2]    [0][3]
[1][2]    [1][3]
[2][2]    [2][3]
[2][1]    [2][2]
[2][0]    [2][1]
[1][0]    [2][0]
[1][1]    [1][0]
          [1][1]
          [1][2]  

function spiralMatrix(matrix)
{
  let arr = [];
  for (let i = 0; i < matrix.length; i++)
  {
    for (let j = 0; j < matrix[i].length; j++)
    {
      if (i != matrix.length - 1 && !arr.includes(matrix[i][j]))
      {
        arr.push(matrix[i][j]);
      }
      else if (!arr.includes(matrix[i][j]))
      {
        arr.push(matrix[i][matrix[i].length - 1 - j])
      }
    }
  }
}